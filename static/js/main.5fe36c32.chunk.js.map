{"version":3,"sources":["hoc/AppContext/AppContext.js","components/Layout/index.js","constants/axios.js","constants/problems.js","constants/helpers.js","components/CodeRunner/index.js","components/CodeSnippet/index.js","components/Header/index.js","components/LoadingIcon/index.js","components/Overlay/index.js","components/ProjectDescription/index.js","components/Sidebar/index.js","utilities/throttle/index.js","hooks/useScroll.js","containers/ProjectEuler/index.js","hooks/useMountEffect.js","App.js","reportWebVitals.js","index.js"],"names":["AppContext","createContext","AppProvider","children","useState","globalState","setGlobalState","Provider","value","Layout","className","axiosOptions","baseURL","process","problems","key","title","prompt","codeStringified","completed","helperFunctions","CodeRunner","problemNumber","isLoading","setIsLoading","isResultVisible","setIsResultVisible","result","setResult","errors","setErrors","useEffect","_close","_runCode","a","axios","url","res","data","Collapse","in","onExited","Button","variant","onClick","CodeSnippet","Header","toggleSidebar","problemCount","isHeaderShrunk","icon","style","zIndex","completedProblems","totalProblems","LoadingIcon","size","spin","Overlay","setOverlayVisible","ProjectDescription","Sidebar","open","select","toggle","map","problem","throttle","callback","limit","inProgress","setTimeout","useScroll","y","window","scrollY","direction","scroll","setScroll","_handleDocumentScroll","useCallback","prev","_handleDocumentScrollThrottled","addEventListener","removeEventListener","DEFAULT_PROBLEM_COUNT","ProjectEuler","setProblemCount","sessionStorage","getItem","visibleProblem","setVisibleProblem","isSidebarOpen","setIsSidebarOpen","setIsHeaderShrunk","isMountedRef","useRef","current","call","useMountEffect","tempProblemCount","forEach","setItem","removeItem","_toggleSidebar","state","length","fn","index","iconList","Object","keys","Icons","filter","library","add","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5fe36c32.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\r\n\r\nexport const AppContext = createContext();\r\n\r\nexport const AppProvider = ({ children }) => {\r\n  const [globalState, setGlobalState] = useState();\r\n\r\n  return (\r\n    <AppContext.Provider value={[globalState, setGlobalState]}>\r\n      { children }\r\n    </AppContext.Provider>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport const Layout = ({ children }) => {\r\n  return (\r\n    <div className=\"bg-gray-50 min-h-screen min-w-screen overflow-hidden\">\r\n      <main>\r\n        { children }\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Layout;","const baseUrl = process.env.REACT_APP_BASE_URL;\r\n\r\nexport const axiosOptions = {\r\n  baseURL: baseUrl,\r\n};","import { helpers } from './helpers';\r\n\r\nexport const problems = [\r\n  // Problem 1\r\n  {\r\n    key: 1,\r\n    title: 'Multiples of 3 and 5',\r\n    prompt:\r\n      <>\r\n        <p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.<br />\r\n        The sum of these multiples is 23.</p>\r\n        <p>Find the sum of all the multiples of 3 or 5 below 1000.</p>\r\n      </>,\r\n    codeStringified:\r\n`public int MultiplesOfThreeAndFive(int maxNum)\r\n{\r\n  var sum = 0;\r\n  for (var i = 1; i < maxNum; ++i)\r\n  {\r\n    if (i % 3 == 0 || i % 5 == 0)\r\n      sum += i;\r\n  }\r\n  return sum;\r\n}\r\n\r\nreturn MultiplesOfThreeAndFive(1000);`,\r\n    completed: true,\r\n  },\r\n  // Problem 2\r\n  {\r\n    key: 2,\r\n    title: 'Even Fibonacci numbers',\r\n    prompt:\r\n      <>\r\n        <p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:</p>\r\n        <p className=\"text-center\">1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</p>\r\n        <p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>\r\n      </>,\r\n    codeStringified:\r\n`public int EvenFibonacciNumbers(int maxNum)\r\n{\r\n  var prevNum = 1;\r\n  var nextNum = 1;\r\n  var sum = 0;\r\n  while (nextNum <= maxNum)\r\n  {\r\n    if (nextNum % 2 == 0)\r\n      sum += nextNum;\r\n    prevNum = nextNum - prevNum;\r\n    nextNum += prevNum;\r\n  }\r\n  return sum;\r\n}\r\n\r\nreturn EvenFibonacciNumbers(4000000);`,\r\n    completed: true,\r\n  },\r\n  // Problem 3\r\n  {\r\n    key: 3,\r\n    title: 'Largest prime factor',\r\n    prompt:\r\n      <>\r\n        <p>The prime factors of 13195 are 5, 7, 13 and 29.</p>\r\n        <p>What is the largest prime factor of the number 600851475143?</p>\r\n      </>,\r\n    codeStringified:\r\n`public long LargestPrimeFactor(long value, long divisor = 2)\r\n{\r\n  while ((value % divisor) != 0 && Math.Pow(divisor, 2) <= value)\r\n  {\r\n    divisor++;\r\n  }\r\n\r\n  return Math.Pow(divisor, 2) <= value\r\n    ? LargestPrimeFactor(value / divisor, divisor)\r\n    : value;\r\n}\r\n\r\nreturn LargestPrimeFactor(600851475143);`,\r\n    completed: true,\r\n  },\r\n  // Problem 4\r\n  {\r\n    key: 4,\r\n    title: 'Largest palindrome product',\r\n    prompt:\r\n      <>\r\n        <p>A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.</p>\r\n        <p>Find the largest palindrome made from the product of two 3-digit numbers.</p>\r\n      </>,\r\n    codeStringified:\r\n`public int LargestPalindromeProduct()\r\n{\r\n  int largestPossibleFactor = 999;\r\n  int smallestPossibleFactor = 100;\r\n  int maxNum = largestPossibleFactor * largestPossibleFactor;\r\n\r\n  for (var i = maxNum; i > 0; --i)\r\n  {\r\n    if (_helperService.IsPalindrome(i.ToString()))\r\n    {\r\n      for (var j = largestPossibleFactor; j >= smallestPossibleFactor; --j)\r\n      {\r\n        for (var k = largestPossibleFactor; k >= smallestPossibleFactor; --k)\r\n        {\r\n          if (j * k == i)\r\n            return i;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return 0;\r\n}\r\n\r\nreturn LargestPalindromeProduct();`,\r\n    completed: true,\r\n    helperFunctions: [ helpers.isPalindrome ]\r\n  },\r\n  // Problem 5\r\n  {\r\n    key: 5,\r\n    title: 'Smallest multiple',\r\n    prompt:\r\n      <>\r\n        <p>2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.</p>\r\n        <p>What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?</p>\r\n      </>,\r\n    codeStringified:\r\n`public int SmallestMultiple(int maxNum)\r\n{\r\n  var resultFound = false;\r\n  var currentNum = 0;\r\n  while (!resultFound)\r\n  {\r\n    resultFound = true;\r\n    currentNum += maxNum;\r\n    for (var i = 2; i < maxNum; ++i)\r\n    {\r\n      if (currentNum % i != 0)\r\n      {\r\n        resultFound = false;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return currentNum;\r\n}\r\nreturn SmallestMultiple(20);`,\r\n    completed: true,\r\n  },\r\n  // Problem 6\r\n  {\r\n    key: 6,\r\n    title: 'Sum square difference',\r\n    prompt:\r\n      <>\r\n        <p>The sum of the squares of the first ten natural numbers is:</p>\r\n        <p className=\"text-center\">1^2 + 2^2 + ... + 10^2 = 385</p>\r\n        <p>The square of the sum of the first ten natural numbers is:</p>\r\n        <p className=\"text-center\">(1 + 2 + ... + 10)^2 = 55^2 = 3025</p>\r\n        <p>Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is:</p>\r\n        <p className=\"text-center font-bold\">3025 - 385 = 2640</p>\r\n        <p>Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.</p>\r\n      </>,\r\n    codeStringified:\r\n`public double SumSquareDifference(int maxNum)\r\n{\r\n    double sumOfSquares = 0;\r\n    double sum = 0;\r\n\r\n    for (var i = 1; i <= maxNum; ++i)\r\n    {\r\n        sumOfSquares += Math.Pow(i, 2);\r\n        sum += i;\r\n    }\r\n\r\n    var squareOfSum = Math.Pow(sum, 2);\r\n\r\n    return squareOfSum - sumOfSquares;\r\n}\r\nreturn SumSquareDifference(100);`,\r\n    completed: true,\r\n  },\r\n  // Problem 7\r\n  {\r\n    key: 7,\r\n    title: '10001st prime',\r\n    prompt:\r\n      <>\r\n        <p>By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.</p>\r\n        <p>What is the 10,001st prime number?</p>\r\n      </>,\r\n    codeStringified:\r\n`public long FindNthPrime(long n, long primeCount = 0, long lastPrime = 0)\r\n{\r\n    if (primeCount == n)\r\n        return lastPrime;\r\n    if (lastPrime == 0)\r\n        return FindNthPrime(n, ++primeCount, 2);\r\n\r\n    var num = lastPrime;\r\n    var divisor = 2;\r\n    while ((num % divisor) != 0)\r\n    {\r\n        while (divisor < Math.Sqrt(num))\r\n        {\r\n            divisor++;\r\n        }\r\n        num++;\r\n    }\r\n    return FindNthPrime(n, ++primeCount, num);\r\n}`,\r\n    completed: false,\r\n  },\r\n  // Problem 8\r\n  {\r\n    key: 8,\r\n    title: 'Largest product in a series',\r\n    prompt:\r\n      <>\r\n        <p>The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.</p>\r\n        <pre className=\"whitespace-pre-line break-all max-w-xl mx-auto text-center\">\r\n          {(\r\n            \"73167176531330624919225119674426574742355349194934\" +\r\n            \"96983520312774506326239578318016984801869478851843\" +\r\n            \"85861560789112949495459501737958331952853208805511\" +\r\n            \"12540698747158523863050715693290963295227443043557\" +\r\n            \"66896648950445244523161731856403098711121722383113\" +\r\n            \"62229893423380308135336276614282806444486645238749\" +\r\n            \"30358907296290491560440772390713810515859307960866\" +\r\n            \"70172427121883998797908792274921901699720888093776\" +\r\n            \"65727333001053367881220235421809751254540594752243\" +\r\n            \"52584907711670556013604839586446706324415722155397\" +\r\n            \"53697817977846174064955149290862569321978468622482\" +\r\n            \"83972241375657056057490261407972968652414535100474\" +\r\n            \"82166370484403199890008895243450658541227588666881\" +\r\n            \"16427171479924442928230863465674813919123162824586\" +\r\n            \"17866458359124566529476545682848912883142607690042\" +\r\n            \"24219022671055626321111109370544217506941658960408\" +\r\n            \"07198403850962455444362981230987879927244284909188\" +\r\n            \"84580156166097919133875499200524063689912560717606\" +\r\n            \"05886116467109405077541002256983155200055935729725\" +\r\n            \"71636269561882670428252483600823257530420752963450\"\r\n          )}\r\n        </pre>\r\n        <p>Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?</p>\r\n      </>,\r\n    codeStringified:\r\n`public long LargestProductInASeries(int seriesLength)\r\n{\r\n    var largeNum =\r\n        \"73167176531330624919225119674426574742355349194934\" +\r\n        \"96983520312774506326239578318016984801869478851843\" +\r\n        \"85861560789112949495459501737958331952853208805511\" +\r\n        \"12540698747158523863050715693290963295227443043557\" +\r\n        \"66896648950445244523161731856403098711121722383113\" +\r\n        \"62229893423380308135336276614282806444486645238749\" +\r\n        \"30358907296290491560440772390713810515859307960866\" +\r\n        \"70172427121883998797908792274921901699720888093776\" +\r\n        \"65727333001053367881220235421809751254540594752243\" +\r\n        \"52584907711670556013604839586446706324415722155397\" +\r\n        \"53697817977846174064955149290862569321978468622482\" +\r\n        \"83972241375657056057490261407972968652414535100474\" +\r\n        \"82166370484403199890008895243450658541227588666881\" +\r\n        \"16427171479924442928230863465674813919123162824586\" +\r\n        \"17866458359124566529476545682848912883142607690042\" +\r\n        \"24219022671055626321111109370544217506941658960408\" +\r\n        \"07198403850962455444362981230987879927244284909188\" +\r\n        \"84580156166097919133875499200524063689912560717606\" +\r\n        \"05886116467109405077541002256983155200055935729725\" +\r\n        \"71636269561882670428252483600823257530420752963450\";\r\n    long largestProduct = 0;\r\n\r\n    for (var seriesEnd = seriesLength; seriesEnd <= largeNum.Length; ++seriesEnd)\r\n    {\r\n        var series = largeNum.Substring(seriesEnd - seriesLength, seriesLength);\r\n        var indexOfZero = series.LastIndexOf('0');\r\n        if (indexOfZero > -1)\r\n        {\r\n            seriesEnd += indexOfZero;\r\n            continue;\r\n        }\r\n\r\n        long product = 1;\r\n        foreach (char c in series)\r\n        {\r\n            int num;\r\n            if (int.TryParse(c.ToString(), out num))\r\n            {\r\n                product *= num;\r\n            }\r\n        }\r\n\r\n        if (product > largestProduct)\r\n        {\r\n            largestProduct = product;\r\n        }\r\n    }\r\n\r\n    return largestProduct;\r\n}\r\nreturn LargestProductInASeries(13);`,\r\n    completed: true,\r\n  },\r\n  // Problem 9\r\n  {\r\n    key: 9,\r\n    title: 'Special Pythagorean triplet',\r\n    prompt:\r\n      <>\r\n        <p>A Pythagorean triplet is a set of three natural numbers, <var>a</var> &lt; <var>b</var> &lt; <var>c</var>, for which:</p>\r\n        <div className=\"text-center\">\r\n          <var>a</var><sup>2</sup> + <var>b</var><sup>2</sup> = <var>c</var><sup>2</sup>\r\n        </div>\r\n        <p>For example: 3<sup>2</sup> + 4<sup>2</sup> = 9 + 16 = 25 = 5<sup>2</sup>.</p>\r\n        <p>There exists exactly one Pythagorean triplet for which <var>a</var> + <var>b</var> + <var>c</var> = 1000.<br />Find the product <var>abc</var>.</p>\r\n      </>,\r\n    codeStringified: null,\r\n    completed: false,\r\n  },\r\n  // Problem 10\r\n  {\r\n    key: 10,\r\n    title: 'Summation of primes',\r\n    prompt:\r\n      <>\r\n        <p>The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.</p>\r\n        <p>Find the sum of all the primes below two million.</p>\r\n      </>,\r\n    codeStringified: null,\r\n    completed: false,\r\n  },\r\n];","export const helpers = {\r\n  isPalindrome:\r\n`public bool IsPalindrome(string value)\r\n{\r\n  var valueNoWhitespaceOrPunctuation = string.Concat(value\r\n    .Where(c => !char.IsWhiteSpace(c) && !char.IsPunctuation(c)))\r\n    .ToLower();\r\n  return _IsPalindrome(valueNoWhitespaceOrPunctuation);\r\n\r\n  static bool _IsPalindrome(string value)\r\n  {\r\n    if (value[0] == value[^1])\r\n    {\r\n      if (value.Length > 2)\r\n      {\r\n        var trimmedValue = value[1..^1];\r\n        return _IsPalindrome(trimmedValue);\r\n      }\r\n      else\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      return false;\r\n    }\r\n  }\r\n}`,\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Button, Collapse } from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nimport { LoadingIcon } from '../../components';\r\nimport { axiosOptions } from '../../constants';\r\n\r\nexport const CodeRunner = ({ problemNumber }) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isResultVisible, setIsResultVisible] = useState(false);\r\n  const [result, setResult] = useState();\r\n  const [errors, setErrors] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(false);\r\n    setIsResultVisible(false);\r\n  }, [problemNumber]);\r\n  \r\n  const _close = () => {\r\n    setIsResultVisible(false);\r\n  }\r\n  useEffect(_close, [problemNumber]);\r\n\r\n  const _clear = () => {\r\n    setResult(null);\r\n  }\r\n\r\n  const _runCode = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const res = await axios({...axiosOptions, url: `/problems/${problemNumber}`});\r\n      setResult(res.data);\r\n      setErrors(false);\r\n      setIsLoading(false);\r\n      setIsResultVisible(true);\r\n    } catch {\r\n      setErrors(true);\r\n      setIsLoading(false);\r\n      setIsResultVisible(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`flex my-1 ${isResultVisible ? \"justify-between\" : \"justify-end\"}`}>\r\n      <Collapse in={isResultVisible} onExited={_clear}>\r\n        <div className=\"flex bg-gray-200 w-full rounded-md px-2\">\r\n          <span className=\"my-auto\">{!errors ? `Result: ${result}` : 'Failed to reach server.'}</span>\r\n        </div>\r\n      </Collapse>\r\n      <>\r\n        {result && (\r\n          <Button\r\n            variant=\"secondary\"\r\n            className=\"ml-1\"\r\n            onClick={_close}\r\n          >\r\n            Clear\r\n          </Button>\r\n        )}\r\n        <Button\r\n          variant=\"primary\"\r\n          className=\"ml-1\"\r\n          onClick={_runCode}\r\n        >\r\n          <span className=\"flex items-center\">\r\n            Run\r\n            {isLoading && (\r\n              <LoadingIcon className=\"ml-2\" />\r\n            )}\r\n          </span>\r\n        </Button>\r\n      </>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CodeRunner;","import React from 'react';\r\n\r\nexport const CodeSnippet = ({ children }) => {\r\n  return (\r\n    <div className=\"bg-gray-300 rounded-lg\">\r\n      <code className=\"flex whitespace-pre overflow-x-auto text-black mx-3 py-2\">\r\n        { children }\r\n      </code>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CodeSnippet;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nexport const Header = ({ toggleSidebar, problemCount, isHeaderShrunk }) => {\r\n  return (\r\n    <>\r\n      <div className=\"fixed w-full top-0 text-gray-700\">\r\n        <div className=\"relative pt-2 bg-blue-300\">\r\n          <button\r\n            className=\"fixed ml-1 p-1 z-10\"\r\n            onClick={toggleSidebar}\r\n          >\r\n            <FontAwesomeIcon icon=\"bars\" className=\"text-lg\" />\r\n          </button>\r\n          <div className={`${isHeaderShrunk ? 'pb-2' : 'pb-0'} transform duration-300 text-2xl text-center font-bold leading-8 md:pb-2 md:text-3xl`}>\r\n            Project Euler\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={`relative transition duration-300 bg-blue-300 transform pb-1 ${isHeaderShrunk ? 'ease-in -translate-y-full' : 'ease-out translate-y-0'}`}\r\n          style={{ zIndex: '-1' }}\r\n        >\r\n          <div className=\"mx-4\">\r\n            <div className=\"flex flex-wrap max-w-3xl m-auto mt-1 flex justify-between text-sm text-center md:-mt-2\">\r\n              <div className=\"mt-2 flex items-center\">\r\n                <FontAwesomeIcon icon=\"address-card\" />\r\n                <span className=\"text-gray-600 pl-2\">Zachary Young</span>\r\n              </div>\r\n              <div className=\"mt-2 flex items-center\">\r\n                <FontAwesomeIcon icon=\"check\" />\r\n                <span className=\"text-gray-600 pl-2\">{problemCount.completedProblems} out of {problemCount.totalProblems}</span>\r\n              </div>\r\n              <div className=\"hidden xs:flex mt-2 flex items-center\">\r\n                <FontAwesomeIcon icon=\"calendar-alt\" />\r\n                <span className=\"text-gray-600 pl-2\">Started on March 7, 2021</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nexport const LoadingIcon = ({ size, className }) => (\r\n  <FontAwesomeIcon\r\n    icon=\"circle-notch\"\r\n    className={className}\r\n    size={size}\r\n    spin\r\n  />\r\n);\r\n\r\nexport default LoadingIcon;","import React from 'react';\r\n\r\nexport const Overlay = ({ setOverlayVisible }) => (\r\n  <div\r\n    className=\"fixed w-screen h-screen inset-0 bg-gray-600 bg-opacity-70 z-10\"\r\n    onClick={() => setOverlayVisible(false)}\r\n  />\r\n);\r\n\r\nexport default Overlay;","import React from 'react';\r\n\r\nexport const ProjectDescription = () => (\r\n  <div className=\"space-y-4\">\r\n    <div>\r\n      Hello! My name is Zachary Young. This is my website that I made to practice algorithms, as well as become more familiar with AWS.\r\n    </div>\r\n    <div>\r\n      Project Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve.\r\n      Although mathematics will help you arrive at elegant and efficient methods,\r\n      the use of a computer and programming skills will be required to solve most problems.\r\n    </div>\r\n    <div>\r\n      Each problem has been designed according to a \"one-minute rule\",\r\n      which means that although it may take several hours to design a successful algorithm with more difficult problems,\r\n      an efficient implementation will allow a solution to be obtained on a modestly powered computer in less than one minute.\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default ProjectDescription;","import React from 'react';\r\n\r\nimport { Overlay } from '../Overlay';\r\nimport { problems } from '../../constants';\r\n\r\nexport const Sidebar = ({ open, select, toggle }) => {\r\n  return (\r\n    <>\r\n      <div\r\n        className={\r\n          `fixed inset-y-0 left-0 z-30 w-64 overflow-y-auto transition duration-300 transform border-r-2 bg-gray-100\r\n          ${open ? \"ease-out translate-x-0\" : \"ease-in -translate-x-full\"}`}\r\n      >\r\n        <div\r\n          className=\"cursor-pointer py-2 pl-4 hover:bg-gray-200\"\r\n          onClick={() => select()}\r\n        >\r\n          <span>Project Description</span>\r\n        </div>\r\n        {problems?.map(problem => (\r\n          <div\r\n            key={problem.key}\r\n            className={`cursor-pointer py-2 pl-2 hover:bg-gray-200 ${!problem.completed && 'text-red-500'}`}\r\n            onClick={() => select(problem)}\r\n          >\r\n            <span>{problem.key}. {problem.title}{!problem.completed && ' (WIP)'}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {open &&\r\n        <Overlay setOverlayVisible={toggle} />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Sidebar;","export const throttle = (callback, limit) => {\r\n  let inProgress = false;\r\n\r\n  return (...args) => {\r\n    if (!inProgress) {\r\n      inProgress = true;\r\n      callback(...args);\r\n      setTimeout(() => {\r\n        inProgress = false;\r\n      }, limit);\r\n    }\r\n  }\r\n}\r\n\r\nexport default throttle;","import { useState, useEffect, useCallback } from 'react';\r\nimport { throttle } from '../utilities';\r\n\r\nexport const useScroll = () => {\r\n  const [scroll, setScroll] = useState({\r\n    y: window.scrollY,\r\n    direction: null,\r\n  });\r\n  \r\n  const _handleDocumentScroll = useCallback(() => {\r\n    setScroll(prev => {\r\n      const y = -window.scrollY;\r\n      let direction;\r\n      if (y < prev.y)\r\n        direction = 'down';\r\n      if (y > prev.y)\r\n        direction = 'up';\r\n\r\n      return { y, direction };\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const _handleDocumentScrollThrottled = throttle(_handleDocumentScroll, 50);\r\n\r\n    window.addEventListener('scroll', _handleDocumentScrollThrottled);\r\n\r\n    return () => window.removeEventListener('scroll', _handleDocumentScrollThrottled);\r\n  }, [_handleDocumentScroll]);\r\n\r\n  return scroll;\r\n}\r\n\r\nexport default useScroll;","import React, { useEffect, useState } from 'react';\r\n\r\nimport { Header, CodeSnippet, CodeRunner, ProjectDescription, Sidebar } from '../../components';\r\nimport { useMountEffect, useScroll } from '../../hooks';\r\nimport { problems } from '../../constants';\r\n\r\nconst DEFAULT_PROBLEM_COUNT = {\r\n  completedProblems: 0,\r\n  totalProblems: 100,\r\n};\r\n\r\nconst ProjectEuler = () => {\r\n  const { direction } = useScroll();\r\n  const [problemCount, setProblemCount] = useState(DEFAULT_PROBLEM_COUNT);\r\n  const [visibleProblem, setVisibleProblem] =\r\n    useState(problems[\r\n      sessionStorage.getItem('currentProblem') - 1 || 0\r\n    ]);\r\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n  const [isHeaderShrunk, setIsHeaderShrunk] = useState(false);\r\n\r\n  useMountEffect(() => {\r\n    let tempProblemCount = {...problemCount};\r\n    let completed = 0;\r\n    problems.forEach(problem => {\r\n      if (problem.completed)\r\n        completed++;\r\n    });\r\n    tempProblemCount.completedProblems = completed;\r\n    setProblemCount(tempProblemCount);\r\n  });\r\n\r\n  useEffect(() => {\r\n    setIsSidebarOpen(false);\r\n    if (visibleProblem)\r\n      sessionStorage.setItem('currentProblem', visibleProblem.key);\r\n    else\r\n      sessionStorage.removeItem('currentProblem');\r\n  }, [visibleProblem]);\r\n\r\n  useEffect(() => {\r\n    setIsHeaderShrunk(direction === 'down');\r\n  }, [direction]);\r\n\r\n  const _toggleSidebar = state => {\r\n    setIsSidebarOpen(state ?? !isSidebarOpen);\r\n  }\r\n\r\n  const _selectProblem = problem => {\r\n    setVisibleProblem(problem);\r\n    _toggleSidebar(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Sidebar\r\n        open={isSidebarOpen}\r\n        select={_selectProblem}\r\n        toggle={_toggleSidebar}\r\n      />\r\n      <Header\r\n        isHeaderShrunk={isHeaderShrunk}\r\n        problemCount={problemCount}\r\n        toggleSidebar={_toggleSidebar}\r\n      />\r\n      <div className=\"max-w-4xl mt-14 mb-4 mx-auto py-4 px-2\">\r\n        {visibleProblem ? (\r\n          <>\r\n            <div className=\"text-center text-2xl pb-2\">\r\n              <span>Problem {visibleProblem.key}: </span>\r\n              <span>{visibleProblem.title}</span>\r\n              {!visibleProblem.completed && (\r\n                <span> (WIP)</span>\r\n              )}\r\n            </div>\r\n            {visibleProblem.prompt}\r\n            {!!visibleProblem.codeStringified && (\r\n              <div className=\"max-w-3xl mx-auto mb-2\">\r\n                <CodeSnippet>\r\n                  {visibleProblem.codeStringified}\r\n                </CodeSnippet>\r\n                {visibleProblem.completed && (\r\n                  <CodeRunner problemNumber={visibleProblem.key} />\r\n                )}\r\n              </div>\r\n            )}\r\n            {visibleProblem.helperFunctions?.length > 0 && (\r\n              <>\r\n                {visibleProblem.helperFunctions.length > 1 ? (\r\n                  <span>The following helper functions were used for this solution:</span>\r\n                ) : (\r\n                  <span>The following helper function was used for this solution:</span>\r\n                )}\r\n                {visibleProblem.helperFunctions.map((fn, index) => (\r\n                  <div key={index} className=\"max-w-3xl mx-auto my-2\">\r\n                    <CodeSnippet>\r\n                      {fn}\r\n                    </CodeSnippet>\r\n                  </div>\r\n                ))}\r\n              </>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <ProjectDescription />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ProjectEuler;","import { useEffect, useRef } from 'react';\r\n\r\nexport const useMountEffect = (callback) => {\r\n  const isMountedRef = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (!isMountedRef.current) {\r\n      isMountedRef.current = true;\r\n      callback.call();\r\n    }\r\n  }, [callback]);\r\n}","import React from 'react';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport * as Icons from '@fortawesome/free-solid-svg-icons';\nimport './App.scss';\nimport './index.css';\n\nimport { AppProvider } from './hoc/AppContext/AppContext';\nimport Layout from './components/Layout';\nimport ProjectEuler from './containers/ProjectEuler';\n\nconst iconList = Object\n  .keys(Icons)\n  .filter(key => key !== 'fas' && key !== 'prefix')\n  .map(icon => Icons[icon]);\nlibrary.add(...iconList);\n\nfunction App() {\n  return (\n    <AppProvider>\n      <Layout>\n        <ProjectEuler />\n      </Layout>\n    </AppProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}