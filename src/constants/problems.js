import { helpers } from './helpers';

export const problems = [
  // Problem 1
  {
    key: 1,
    title: 'Multiples of 3 and 5',
    prompt:
      <>
        <p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.<br />
        The sum of these multiples is 23.</p>
        <p>Find the sum of all the multiples of 3 or 5 below 1000.</p>
      </>,
    codeStringified:
`public int MultiplesOfThreeAndFive(int maxNum)
{
  var sum = 0;
  for (var i = 1; i < maxNum; ++i)
  {
    if (i % 3 == 0 || i % 5 == 0)
      sum += i;
  }
  return sum;
}

return MultiplesOfThreeAndFive(1000);`,
    completed: true,
  },
  // Problem 2
  {
    key: 2,
    title: 'Even Fibonacci numbers',
    prompt:
      <>
        <p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:</p>
        <p className="text-center">1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</p>
        <p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>
      </>,
    codeStringified:
`public int EvenFibonacciNumbers(int maxNum)
{
  var prevNum = 1;
  var nextNum = 1;
  var sum = 0;
  while (nextNum <= maxNum)
  {
    if (nextNum % 2 == 0)
      sum += nextNum;
    prevNum = nextNum - prevNum;
    nextNum += prevNum;
  }
  return sum;
}

return EvenFibonacciNumbers(4000000);`,
    completed: true,
  },
  // Problem 3
  {
    key: 3,
    title: 'Largest prime factor',
    prompt:
      <>
        <p>The prime factors of 13195 are 5, 7, 13 and 29.</p>
        <p>What is the largest prime factor of the number 600851475143?</p>
      </>,
    codeStringified:
`public long LargestPrimeFactor(long value, long divisor = 2)
{
  while ((value % divisor) != 0 && Math.Pow(divisor, 2) <= value)
  {
    divisor++;
  }

  return Math.Pow(divisor, 2) <= value
    ? LargestPrimeFactor(value / divisor, divisor)
    : value;
}

return LargestPrimeFactor(600851475143);`,
    completed: true,
  },
  // Problem 4
  {
    key: 4,
    title: 'Largest palindrome product',
    prompt:
      <>
        <p>A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.</p>
        <p>Find the largest palindrome made from the product of two 3-digit numbers.</p>
      </>,
    codeStringified:
`public int LargestPalindromeProduct()
{
  int largestPossibleFactor = 999;
  int smallestPossibleFactor = 100;
  int maxNum = largestPossibleFactor * largestPossibleFactor;

  for (var i = maxNum; i > 0; --i)
  {
    if (_helperService.IsPalindrome(i.ToString()))
    {
      for (var j = largestPossibleFactor; j >= smallestPossibleFactor; --j)
      {
        for (var k = largestPossibleFactor; k >= smallestPossibleFactor; --k)
        {
          if (j * k == i)
            return i;
        }
      }
    }
  }
  return 0;
}

return LargestPalindromeProduct();`,
    completed: true,
    helperFunctions: [ helpers.isPalindrome ]
  },
  // Problem 5
  {
    key: 5,
    title: 'Smallest multiple',
    prompt:
      <>
        <p>2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.</p>
        <p>What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?</p>
      </>,
    codeStringified:
`public int SmallestMultiple(int maxNum)
{
  var resultFound = false;
  var currentNum = 0;
  while (!resultFound)
  {
    resultFound = true;
    currentNum += maxNum;
    for (var i = 2; i < maxNum; ++i)
    {
      if (currentNum % i != 0)
      {
        resultFound = false;
        break;
      }
    }
  }
  return currentNum;
}
return SmallestMultiple(20);`,
    completed: true,
  },
  // Problem 6
  {
    key: 6,
    title: 'Sum square difference',
    prompt:
      <>
        <p>The sum of the squares of the first ten natural numbers is:</p>
        <p className="text-center">1^2 + 2^2 + ... + 10^2 = 385</p>
        <p>The square of the sum of the first ten natural numbers is:</p>
        <p className="text-center">(1 + 2 + ... + 10)^2 = 55^2 = 3025</p>
        <p>Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is:</p>
        <p className="text-center font-bold">3025 - 385 = 2640</p>
        <p>Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.</p>
      </>,
    codeStringified:
`public double SumSquareDifference(int maxNum)
{
    double sumOfSquares = 0;
    double sum = 0;

    for (var i = 1; i <= maxNum; ++i)
    {
        sumOfSquares += Math.Pow(i, 2);
        sum += i;
    }

    var squareOfSum = Math.Pow(sum, 2);

    return squareOfSum - sumOfSquares;
}
return SumSquareDifference(100);`,
    completed: true,
  },
  // Problem 7
  {
    key: 7,
    title: '10001st prime',
    prompt:
      <>
        <p>By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.</p>
        <p>What is the 10,001st prime number?</p>
      </>,
    codeStringified:
`public long FindNthPrime(long n, long primeCount = 0, long lastPrime = 0)
{
    if (primeCount == n)
        return lastPrime;
    if (lastPrime == 0)
        return FindNthPrime(n, ++primeCount, 2);

    var num = lastPrime;
    var divisor = 2;
    while ((num % divisor) != 0)
    {
        while (divisor < Math.Sqrt(num))
        {
            divisor++;
        }
        num++;
    }
    return FindNthPrime(n, ++primeCount, num);
}`,
    completed: false,
  },
  // Problem 8
  {
    key: 8,
    title: 'Largest product in a series',
    prompt:
      <>
        <p>The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.</p>
        <pre className="whitespace-pre-line break-all max-w-xl mx-auto text-center">
          {(
            "73167176531330624919225119674426574742355349194934" +
            "96983520312774506326239578318016984801869478851843" +
            "85861560789112949495459501737958331952853208805511" +
            "12540698747158523863050715693290963295227443043557" +
            "66896648950445244523161731856403098711121722383113" +
            "62229893423380308135336276614282806444486645238749" +
            "30358907296290491560440772390713810515859307960866" +
            "70172427121883998797908792274921901699720888093776" +
            "65727333001053367881220235421809751254540594752243" +
            "52584907711670556013604839586446706324415722155397" +
            "53697817977846174064955149290862569321978468622482" +
            "83972241375657056057490261407972968652414535100474" +
            "82166370484403199890008895243450658541227588666881" +
            "16427171479924442928230863465674813919123162824586" +
            "17866458359124566529476545682848912883142607690042" +
            "24219022671055626321111109370544217506941658960408" +
            "07198403850962455444362981230987879927244284909188" +
            "84580156166097919133875499200524063689912560717606" +
            "05886116467109405077541002256983155200055935729725" +
            "71636269561882670428252483600823257530420752963450"
          )}
        </pre>
        <p>Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?</p>
      </>,
    codeStringified:
`public long LargestProductInASeries(int seriesLength)
{
    var largeNum =
        "73167176531330624919225119674426574742355349194934" +
        "96983520312774506326239578318016984801869478851843" +
        "85861560789112949495459501737958331952853208805511" +
        "12540698747158523863050715693290963295227443043557" +
        "66896648950445244523161731856403098711121722383113" +
        "62229893423380308135336276614282806444486645238749" +
        "30358907296290491560440772390713810515859307960866" +
        "70172427121883998797908792274921901699720888093776" +
        "65727333001053367881220235421809751254540594752243" +
        "52584907711670556013604839586446706324415722155397" +
        "53697817977846174064955149290862569321978468622482" +
        "83972241375657056057490261407972968652414535100474" +
        "82166370484403199890008895243450658541227588666881" +
        "16427171479924442928230863465674813919123162824586" +
        "17866458359124566529476545682848912883142607690042" +
        "24219022671055626321111109370544217506941658960408" +
        "07198403850962455444362981230987879927244284909188" +
        "84580156166097919133875499200524063689912560717606" +
        "05886116467109405077541002256983155200055935729725" +
        "71636269561882670428252483600823257530420752963450";
    long largestProduct = 0;

    for (var seriesEnd = seriesLength; seriesEnd <= largeNum.Length; ++seriesEnd)
    {
        var series = largeNum.Substring(seriesEnd - seriesLength, seriesLength);
        var indexOfZero = series.LastIndexOf('0');
        if (indexOfZero > -1)
        {
            seriesEnd += indexOfZero;
            continue;
        }

        long product = 1;
        foreach (char c in series)
        {
            int num;
            if (int.TryParse(c.ToString(), out num))
            {
                product *= num;
            }
        }

        if (product > largestProduct)
        {
            largestProduct = product;
        }
    }

    return largestProduct;
}
return LargestProductInASeries(13);`,
    completed: true,
  },
  // Problem 9
  {
    key: 9,
    title: 'Special Pythagorean triplet',
    prompt:
      <>
        <p>A Pythagorean triplet is a set of three natural numbers, <var>a</var> &lt; <var>b</var> &lt; <var>c</var>, for which:</p>
        <div className="text-center">
          <var>a</var><sup>2</sup> + <var>b</var><sup>2</sup> = <var>c</var><sup>2</sup>
        </div>
        <p>For example: 3<sup>2</sup> + 4<sup>2</sup> = 9 + 16 = 25 = 5<sup>2</sup>.</p>
        <p>There exists exactly one Pythagorean triplet for which <var>a</var> + <var>b</var> + <var>c</var> = 1000.<br />Find the product <var>abc</var>.</p>
      </>,
    codeStringified: null,
    completed: false,
  },
  // Problem 10
  {
    key: 10,
    title: 'Summation of primes',
    prompt:
      <>
        <p>The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.</p>
        <p>Find the sum of all the primes below two million.</p>
      </>,
    codeStringified: null,
    completed: false,
  },
];